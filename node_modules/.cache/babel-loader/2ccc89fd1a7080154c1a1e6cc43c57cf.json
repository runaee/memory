{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UTENTE\\\\react-projects\\\\memory\\\\src\\\\components\\\\Cards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './Cards.css';\nimport CardFlip from './CardFlip.js';\nimport contents from './contents.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const [cardsFlipped, setCardsFlipped] = useState({});\n\n  const setCardFlipped = (id, flipped) => {\n    setCardsFlipped(cardsFlipped => ({ ...cardsFlipped,\n      [id]: flipped\n    }));\n  }; //verifico se ho due carte girate e se le ho le rigiro tutte\n  //se ho due carte girate verifico la vittoria\n\n\n  useEffect(() => {\n    let flipped = 0;\n    if (flipped === 2) console.log('cards flipped changed');\n  }, [cardsFlipped]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: contents.map(content => {\n      return /*#__PURE__*/_jsxDEV(CardFlip, {\n        id: content.id,\n        type: content.type,\n        image: content.image,\n        flipped: typeof cardsFlipped[content.id] !== `undefined` ? cardsFlipped[content.id] : false,\n        color: content.color,\n        setCardFlipped: setCardFlipped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 18\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_s(Cards, \"e0DRjXcA6wu5Z84jeT9LMLdko2o=\");\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["C:/Users/UTENTE/react-projects/memory/src/components/Cards.js"],"names":["React","useState","useEffect","CardFlip","contents","Cards","cardsFlipped","setCardsFlipped","setCardFlipped","id","flipped","console","log","map","content","type","image","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,YAAD,EAAcC,eAAd,IAAiCN,QAAQ,CAAC,EAAD,CAA/C;;AAEA,QAAMO,cAAc,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiB;AACxCH,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkB,OAACG,EAAD,GAAMC;AAAxB,KAAL,CAAb,CAAf;AACC,GAFD,CAJgB,CAQhB;AACA;;;AAEAR,EAAAA,SAAS,CAAC,MAAK;AACf,QAAIQ,OAAO,GAAG,CAAd;AACA,QAAIA,OAAO,KAAK,CAAhB,EACAC,OAAO,CAACC,GAAR,CAAa,uBAAb;AAEC,GALQ,EAKP,CAACN,YAAD,CALO,CAAT;AAOA,sBACI;AAAA,cACCF,QAAQ,CAACS,GAAT,CAAcC,OAAD,IAAW;AACvB,0BAAO,QAAC,QAAD;AACL,QAAA,EAAE,EAAEA,OAAO,CAACL,EADP;AAEL,QAAA,IAAI,EAAEK,OAAO,CAACC,IAFT;AAGL,QAAA,KAAK,EAAED,OAAO,CAACE,KAHV;AAIL,QAAA,OAAO,EAAE,OAAOV,YAAY,CAACQ,OAAO,CAACL,EAAT,CAAnB,KAAsC,WAAtC,GAAmDH,YAAY,CAACQ,OAAO,CAACL,EAAT,CAA/D,GAA8E,KAJlF;AAKL,QAAA,KAAK,EAAEK,OAAO,CAACG,KALV;AAML,QAAA,cAAc,EAAET;AANX;AAAA;AAAA;AAAA;AAAA,cAAP;AAQD,KATA;AADD,mBADJ;AAcF,CAhCF;;GAAMH,K;;KAAAA,K;AAkCN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport './Cards.css';\r\nimport CardFlip  from './CardFlip.js';\r\nimport contents from './contents.js';\r\n\r\nconst Cards = () => {\r\n\r\n    const [cardsFlipped,setCardsFlipped] = useState({})\r\n\r\n    const setCardFlipped = (id, flipped) => {\r\n    setCardsFlipped(cardsFlipped => ({...cardsFlipped, [id]: flipped}))\r\n    }\r\n    \r\n    //verifico se ho due carte girate e se le ho le rigiro tutte\r\n    //se ho due carte girate verifico la vittoria\r\n    \r\n    useEffect(() =>{\r\n    let flipped = 0;\r\n    if (flipped === 2)\r\n    console.log ('cards flipped changed');\r\n  \r\n    },[cardsFlipped]);\r\n\r\n    return (\r\n        <>\r\n        {contents.map((content)=>{\r\n          return <CardFlip \r\n            id={content.id}\r\n            type={content.type}\r\n            image={content.image}\r\n            flipped={typeof(cardsFlipped[content.id]) !== `undefined` ? cardsFlipped[content.id] : false}\r\n            color={content.color}\r\n            setCardFlipped={setCardFlipped}\r\n          /> \r\n        })}\r\n        </>\r\n    );\r\n }\r\n\r\nexport default Cards;\r\n"]},"metadata":{},"sourceType":"module"}