{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/memory/src/components/Cards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './Cards.css';\nimport CardFlip from './CardFlip.js';\nimport contents from './contents.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const [cardsFlipped, setCardsFlipped] = useState({});\n  const [cardsMatched, setCardsMatched] = useState({});\n\n  const setCardFlipped = (id, flipped) => {\n    setCardsFlipped(cardsFlipped => ({ ...cardsFlipped,\n      [id]: flipped\n    }));\n  };\n\n  const setCardMatched = id => {\n    setCardsMatched(cardsMatched => ({ ...cardsMatched,\n      [id]: true\n    }));\n  }; //verifico se ho due carte girate e se le ho le rigiro tutte\n  //se ho due carte girate verifico la vittoria\n\n\n  useEffect(() => {\n    contents.forEach(content => {\n      console.log(content);\n    });\n    console.log('cards flipped changed');\n  }, [cardsFlipped]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: contents.map(content => {\n      return /*#__PURE__*/_jsxDEV(CardFlip, {\n        id: content.id,\n        type: content.type,\n        image: content.image,\n        flipped: typeof cardsFlipped[content.id] !== `undefined` ? cardsFlipped[content.id] : false,\n        color: content.color,\n        setCardFlipped: setCardFlipped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_s(Cards, \"S2vZu+jo5OIvYciQRMU5xlbwy94=\");\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/memory/src/components/Cards.js"],"names":["React","useState","useEffect","CardFlip","contents","Cards","cardsFlipped","setCardsFlipped","cardsMatched","setCardsMatched","setCardFlipped","id","flipped","setCardMatched","forEach","content","console","log","map","type","image","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMS,cAAc,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiB;AACtCL,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkB,OAACK,EAAD,GAAMC;AAAxB,KAAL,CAAb,CAAf;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAIF,EAAD,IAAQ;AAC7BF,IAAAA,eAAe,CAACD,YAAY,KAAK,EAAC,GAAGA,YAAJ;AAAkB,OAACG,EAAD,GAAM;AAAxB,KAAL,CAAb,CAAf;AACD,GAFD,CATgB,CAahB;AACA;;;AAEAT,EAAAA,SAAS,CAAC,MAAK;AAEbE,IAAAA,QAAQ,CAACU,OAAT,CAAkBC,OAAD,IAAa;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,KAFD;AAIEC,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb;AAEH,GARQ,EAQP,CAACX,YAAD,CARO,CAAT;AAUA,sBACI;AAAA,cACCF,QAAQ,CAACc,GAAT,CAAcH,OAAD,IAAW;AACvB,0BAAO,QAAC,QAAD;AACL,QAAA,EAAE,EAAEA,OAAO,CAACJ,EADP;AAEL,QAAA,IAAI,EAAEI,OAAO,CAACI,IAFT;AAGL,QAAA,KAAK,EAAEJ,OAAO,CAACK,KAHV;AAIL,QAAA,OAAO,EAAE,OAAOd,YAAY,CAACS,OAAO,CAACJ,EAAT,CAAnB,KAAsC,WAAtC,GAAmDL,YAAY,CAACS,OAAO,CAACJ,EAAT,CAA/D,GAA8E,KAJlF;AAKL,QAAA,KAAK,EAAEI,OAAO,CAACM,KALV;AAML,QAAA,cAAc,EAAEX;AANX;AAAA;AAAA;AAAA;AAAA,cAAP;AAQD,KATA;AADD,mBADJ;AAcF,CAxCF;;GAAML,K;;KAAAA,K;AA0CN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport './Cards.css';\r\nimport CardFlip  from './CardFlip.js';\r\nimport contents from './contents.js';\r\n\r\nconst Cards = () => {\r\n\r\n    const [cardsFlipped, setCardsFlipped] = useState({});\r\n    const [cardsMatched, setCardsMatched] = useState({});\r\n\r\n    const setCardFlipped = (id, flipped) => {\r\n      setCardsFlipped(cardsFlipped => ({...cardsFlipped, [id]: flipped}))\r\n    }\r\n\r\n    const setCardMatched = (id) => {\r\n      setCardsMatched(cardsMatched => ({...cardsMatched, [id]: true}))\r\n    }\r\n    \r\n    //verifico se ho due carte girate e se le ho le rigiro tutte\r\n    //se ho due carte girate verifico la vittoria\r\n    \r\n    useEffect(() =>{\r\n\r\n      contents.forEach((content) => {\r\n        console.log(content);\r\n      })\r\n\r\n        console.log ('cards flipped changed');\r\n\r\n    },[cardsFlipped]);\r\n\r\n    return (\r\n        <>\r\n        {contents.map((content)=>{\r\n          return <CardFlip \r\n            id={content.id}\r\n            type={content.type}\r\n            image={content.image}\r\n            flipped={typeof(cardsFlipped[content.id]) !== `undefined` ? cardsFlipped[content.id] : false}\r\n            color={content.color}\r\n            setCardFlipped={setCardFlipped}\r\n          /> \r\n        })}\r\n        </>\r\n    );\r\n }\r\n\r\nexport default Cards;\r\n"]},"metadata":{},"sourceType":"module"}