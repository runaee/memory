{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/memory/src/components/Cards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport './Cards.css';\nimport CardFlip from './CardFlip.js';\nimport contents from './contents.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cards = () => {\n  _s();\n\n  const [cardsFlipped, setCardsFlipped] = useState({});\n  const [cardsMatched, setCardsMatched] = useState({});\n  const [cardsIdle, setCardsIdle] = useState({});\n\n  const setCardFlipped = (id, flipped) => {\n    setCardsFlipped(cardsFlipped => ({ ...cardsFlipped,\n      [id]: flipped\n    }));\n  };\n\n  const setCardMatched = id => {\n    setCardsMatched(cardsMatched => ({ ...cardsMatched,\n      [id]: true\n    }));\n  }; //verifico se ho due carte girate e se le ho le rigiro tutte\n  //se ho due carte girate verifico la vittoria\n\n\n  useEffect(() => {\n    let countFlipped = 0;\n    let flippeds = [];\n    contents.forEach(content => {\n      if (cardsFlipped[content.id]) {\n        countFlipped++;\n        flippeds.push(content);\n      }\n    });\n\n    if (countFlipped == 2) {\n      let match = true;\n      let previousFlipped = flippeds[0];\n      flippeds.forEach(flipped => {\n        if (match && flipped.type == previousFlipped.type) {\n          match = true;\n          previousFlipped = flipped;\n        } else {\n          match = false;\n        }\n      });\n\n      if (match) {\n        flippeds.forEach(flipped => {\n          setCardMatched(flipped.id);\n        });\n      }\n    }\n\n    if (countFlipped == 2) {\n      setCardsFlipped({});\n    }\n\n    console.log(cardsMatched);\n  }, [cardsFlipped]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: contents.map(content => {\n      return /*#__PURE__*/_jsxDEV(CardFlip, {\n        id: content.id,\n        type: content.type,\n        image: content.image,\n        flipped: typeof cardsFlipped[content.id] !== `undefined` ? cardsFlipped[content.id] : false,\n        matched: typeof cardsMatched[content.id] !== `undefined` ? cardsMatched[content.id] : false,\n        color: content.color,\n        setCardFlipped: setCardFlipped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 18\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_s(Cards, \"VY+SmvReCE0zIkTgRBbuMiiVvxc=\");\n\n_c = Cards;\nexport default Cards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/memory/src/components/Cards.js"],"names":["React","useState","useEffect","CardFlip","contents","Cards","cardsFlipped","setCardsFlipped","cardsMatched","setCardsMatched","cardsIdle","setCardsIdle","setCardFlipped","id","flipped","setCardMatched","countFlipped","flippeds","forEach","content","push","match","previousFlipped","type","console","log","map","image","color"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport './Cards.css';\r\nimport CardFlip  from './CardFlip.js';\r\nimport contents from './contents.js';\r\n\r\nconst Cards = () => {\r\n\r\n    const [cardsFlipped, setCardsFlipped] = useState({});\r\n    const [cardsMatched, setCardsMatched] = useState({});\r\n    const [cardsIdle, setCardsIdle] = useState({});\r\n\r\n    const setCardFlipped = (id, flipped) => {\r\n      setCardsFlipped(cardsFlipped => ({...cardsFlipped, [id]: flipped}))\r\n    }\r\n\r\n    const setCardMatched = (id) => {\r\n      setCardsMatched(cardsMatched => ({...cardsMatched, [id]: true}))\r\n    }\r\n    \r\n    //verifico se ho due carte girate e se le ho le rigiro tutte\r\n    //se ho due carte girate verifico la vittoria\r\n    \r\n    useEffect(() =>{\r\n\r\n      let countFlipped = 0;\r\n\r\n      let flippeds = [];\r\n\r\n      contents.forEach((content) => {\r\n\r\n        if (cardsFlipped[content.id]) {\r\n          countFlipped++;\r\n          flippeds.push(content);\r\n        }\r\n      })\r\n\r\n      if (countFlipped == 2) {\r\n        let match = true;\r\n        let previousFlipped = flippeds[0];\r\n        flippeds.forEach(flipped => {\r\n          if (match && flipped.type == previousFlipped.type) {\r\n            match = true;\r\n            previousFlipped = flipped;\r\n          } else {\r\n            match = false;\r\n          }\r\n        });\r\n\r\n        if (match) {\r\n          flippeds.forEach(flipped => {\r\n            setCardMatched(flipped.id);\r\n          })\r\n        }\r\n      }\r\n\r\n      if (countFlipped == 2) {\r\n        setCardsFlipped({});\r\n      }\r\n\r\n      console.log(cardsMatched);\r\n    },[cardsFlipped]);\r\n\r\n    return (\r\n        <>\r\n        {contents.map((content)=>{\r\n          return <CardFlip \r\n            id={content.id}\r\n            type={content.type}\r\n            image={content.image}\r\n            flipped={typeof(cardsFlipped[content.id]) !== `undefined` ? cardsFlipped[content.id] : false}\r\n            matched={typeof(cardsMatched[content.id]) !== `undefined` ? cardsMatched[content.id] : false}\r\n            color={content.color}\r\n            setCardFlipped={setCardFlipped}\r\n          /> \r\n        })}\r\n        </>\r\n    );\r\n }\r\n\r\nexport default Cards;\r\n"]},"metadata":{},"sourceType":"module"}